/*
---------------#include "GeoClipmapMgr.h"--------------------------------------------------------------
Filename:    OgreTest1.cpp
-----------------------------------------------------------------------------

This source file is generated by the Ogre AppWizard.

Check out: http://conglomerate.berlios.de/wiki/doku.php?id=ogrewizards

Based on the Example Framework for OGRE
(Object-oriented Graphics Rendering Engine)

Copyright (c) 2000-2007 The OGRE Team
For the latest info, see http://www.ogre3d.org/

You may use this sample code for anything you like, it is not covered by the
LGPL like the rest of the OGRE engine.
-----------------------------------------------------------------------------
*/
#include "GeoClipmapPatch.h"
#include "OgreTest1.h"

//-------------------------------------------------------------------------------------
OgreTest1App::OgreTest1App(void)
{
	patch = 0;
}
//-------------------------------------------------------------------------------------
OgreTest1App::~OgreTest1App(void)
{
	delete patch;
}

//-------------------------------------------------------------------------------------
void OgreTest1App::createScene(void)
{
	TextureNameList texNames;
	/*texNames.push_back("HK_1.bmp");
	texNames.push_back("HK_2.bmp");
	texNames.push_back("HK_3.bmp");
	texNames.push_back("HK_4.bmp");*/
	texNames.push_back("clipmap_129x129.bmp");
	texNames.push_back("clipmap_257x257.bmp");
	texNames.push_back("clipmap_513x513.bmp");
	texNames.push_back("clipmap_1025x1025.bmp");
	/*texNames.push_back("HeightMap127.bmp");
	texNames.push_back("HeightMap255.bmp");
	texNames.push_back("HeightMap511.bmp");
	texNames.push_back("HeightMap1023.bmp");
	texNames.push_back("HeightMap2047.bmp");
	texNames.push_back("HeightMap4095.bmp");*/

	/*texNames.push_back("Mars2.bmp");
	texNames.push_back("Mars1.bmp");*/
	patch = new GeoClipmapPatch(1000, 1000, mCamera, texNames, 127);
	//patch->createBlockMesh(mSceneMgr);
	mSceneMgr->getRootSceneNode()->attachObject(patch);
	mSceneMgr->showBoundingBoxes(true);

	// Set ambient light
	mSceneMgr->setAmbientLight(ColourValue(0.5, 0.5, 0.5));

	// Create a light
	Light* l = mSceneMgr->createLight("MainLight");
	l->setPosition(20,80,50);

	//mCamera->setPosition(0.200, 15,0.200);
	mCamera->setPosition(0, 15, 0);
	//mSceneMgr->getRootSceneNode()->attachObject(mSceneMgr->createEntity("testingON99", "testingON99"));
}

bool OgreTest1App::frameEnded(const FrameEvent& evt)
{
	return BaseApplication::frameEnded(evt);
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
	extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
		INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
		int main(int argc, char *argv[])
#endif
		{
			// Create application object
			OgreTest1App app;

			try {
				app.go();
			} catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
				MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
				std::cerr << "An exception has occured: " <<
					e.getFullDescription().c_str() << std::endl;
#endif
			}

			return 0;
		}

#ifdef __cplusplus
	}
#endif
